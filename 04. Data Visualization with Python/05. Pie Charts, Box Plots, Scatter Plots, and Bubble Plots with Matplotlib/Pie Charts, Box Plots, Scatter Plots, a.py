#Pie Charts, Box Plots, Scatter Plots, and Bubble Plots with Matplotlib

#Step1:import neccessary libraries (import #%matplotlib inline as well if you are creating plots in Jupyter Notebook)
import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
import matplotlib as mpl
import matplotlib.pyplot as plt


#Step2: Importing Data 
df_can = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/Canada.csv')
df_can.head()


#Step3: Data Prepration
#a. Make country as an index of a dataframe
df_can.set_index('Country', inplace=True)
#b. Create a list of years from 1980 - 2013
years = list(map(str, range(1980,2014)))  #The list() function converts an iterable (like a range from dataframe) into a list. Also the map function in Python applies a specified function to each item in an iterable (like a list or range) and returns a map object (which is an iterable).


#Step4: Create Visualizations
#a. Pie Chart:
#We will use pandas groupby method to summarize the immigration data by Continent. 
df_continents = df_can.groupby('Continent', axis=0).sum()

colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.
df_continents['Total'].plot(kind='pie',
                            figsize=(10, 6),     # plot size
                            autopct='%1.1f%%',   # add in percentages
                            startangle=90,       
                            shadow=True,         # add shadow
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3 continents
                            )

plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12, fontsize = 15) # scale the title up by 12% to match pctdistance
plt.axis('equal') 
plt.legend(labels=df_continents.index, loc='upper left', fontsize=7)  # add legend
plt.show()


# Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.
explode_list = [0.0, 0, 0, 0.1, 0.1, 0.2] # ratio for each continent with which to offset each wedge.

df_continents['2013'].plot(kind='pie',
    figsize=(15, 6),
    autopct='%1.1f%%', 
    startangle=90,    
    shadow=True,       
    labels=None,                 # turn off labels on pie chart
    pctdistance=1.12,            # the ratio between the pie center and start of text label
    explode=explode_list         # 'explode' lowest 3 continents
    )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent in 2013', y=1.12) 
plt.axis('equal') 
plt.legend(labels=df_continents.index, loc='upper left') # add legend
plt.show()  # show plot


#b. Box Plot
# Box plot is a distribution plot of the data through five main dimensions which are minimum, first quartile (Q1), second quartile (Median), third quartile (Q3), ans Maximum
# Box plot IQR=Q3=Q1
# Outlier: Outlier = Q3+(1.5*IQR)
df_japan = df_can.loc[['Japan'], years].transpose()  #Japan is a row in the df_can dataframe
df_japan.head()
df_japan.plot(kind='box', figsize=(8, 6))
plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')
plt.show()

#Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013
df_CI = df_can.loc[['India','China'], years].transpose()
print(df_CI)
df_CI.plot(kind='box', figsize=(10,7))
plt.title('Box plots of Immigrants from China and India (1980 - 2013)')
plt.ylabel('Number of Immigrants')
plt.show()

#Note: to create a horizontal box plot we use vert=False. By default we create vertical box plot
df_CI.plot(kind='box', figsize=(10, 7), color='blue', vert=False)
plt.title('Box plots of Immigrants from China and India (1980 - 2013)')
plt.xlabel('Number of Immigrants')
plt.show()

#c. Create Subplots 
# to create some plots together we use subplots (add_subplot(nrows,ncols,plot_number) function)
#     fig = plt.figure() # create figure
#     ax = fig.add_subplot(nrows, ncols, plot_number) # create subplots    #plot_number count start from top left 

#Note: if the plot_number is less than 10 we can use like:subplot(211) == subplot(2, 1, 1) 
# or we can use plt.subplots(rows, columns)
fig = plt.figure() # create figure
ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**
# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')
# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')
plt.show()


# Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s
# Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe df_top15
df_top15 = df_can.sort_values(['Total'], ascending = False, axis=0).head(15)
df_top15
#Create a list of all years in decades 80's, 90's, and 00's and create new dataframe based on them
years_80s = list(map(str, range(1980, 1990))) 
years_90s = list(map(str, range(1990, 2000))) 
years_00s = list(map(str, range(2000, 2010))) 
# slice the original dataframe df_can to create a series for each decade
df_80s = df_top15.loc[:, years_80s].sum(axis=1) 
df_90s = df_top15.loc[:, years_90s].sum(axis=1) 
df_00s = df_top15.loc[:, years_00s].sum(axis=1)
# merge the three series into a new data frame
new_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) 
# display dataframe
new_df.head()
new_df.plot(kind='box', figsize=(10, 6))
plt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')
plt.show()


#c. Scatter Plot:
#Get the dataset. Since we are expecting to use the relationship betewen years and total population, we will convert years to int type
# we can use the sum() method to get the total population per year
df_tot = pd.DataFrame(df_can[years].sum(axis=0)) #this way we can create total column
# change the years to type int (useful for regression later on)
df_tot.index = map(int, df_tot.index)
# reset the index to put in back in as a column in the df_tot dataframe
df_tot.reset_index(inplace = True)
# rename columns
df_tot.columns = ['year', 'total']
# view the final dataframe
df_tot.head()

#now create scatter plot
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
plt.show()

#Now create a regression line on the above scatter plot:
# Step 1: Get the equation of line of best fit. We will use Numpy's polyfit() method by passing in the following:
x = df_tot['year']      # year on x-axis
y = df_tot['total']     # total on y-axis
fit = np.polyfit(x, y, deg=1)  #x=x-coordinates of the data and y is the y-coordinates of the data and deg: Degree of fitting polynomial. 1 = linear, 2 = quadratic
fit
# Step2: create regression plot
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
# plot line of best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))
plt.show()


#Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013
df_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()
df_total = pd.DataFrame(df_countries.sum(axis=1))
df_total.reset_index(inplace=True)
df_total.columns=['year', 'total']
df_total['year'] = df_total['year'].astype(int)  #convert year column to integer
df_total.head()
#Generate the scatter plot by plotting the total versus year in df_total
df_total.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
plt.show()


#d. Bubble Plot:
# Step1: Get the data for Brazil and Argentina. Like in the previous example, we will convert the Years to type int and include it in the dataframe.
# transposed dataframe
df_can_t = df_can[years].transpose()
# cast the Years (the index) to type int
df_can_t.index = map(int, df_can_t.index)
# let's label the index. This will automatically be the column name when we reset the index
df_can_t.index.name = 'Year'
# reset index to bring the Year in as a column
df_can_t.reset_index(inplace=True)
# view the changes
df_can_t.head()


# Step2: Create the normalized weights
# normalize Brazil data
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())
# normalize Argentina data
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())

#Step3: Create Scatter plot
# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Brazil',
                    figsize=(14, 8),
                    alpha=0.5,  # transparency
                    color='green',
                    s=norm_brazil * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                    )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Argentina',
                    alpha=0.5,
                    color="blue",
                    s=norm_argentina * 2000 + 10,
                    ax=ax0
                    )
ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 to 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')

 
# Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013. You can use df_can_t.
#Step1: Normalize the data pertaining to China and India.
# normalized Chinese data
norm_china = (df_can_t['China'] - df_can_t['China'].min())/(df_can_t['China'].max() - df_can_t['China'].min())
# normalized Indian data
norm_india = (df_can_t['India'] - df_can_t['India'].min())/(df_can_t['India'].max() - df_can_t['India'].min())

#Step 2: Generate the bubble plots.
ax0 = df_can_t.plot(kind='scatter',                     
                    x='Year',
                    y='China',
                    figsize=(14, 8),
                    alpha=0.5,  # transparency
                    color='green',
                    s=norm_china * 2000 + 10,  # pass in weights of the bubbles
                    xlim=(1975, 2015)
                   )
# India
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='India',
                    alpha=0.5,
                    color="blue",
                    s=norm_india * 2000 + 10,  # pass in weights of the bubbles
                    ax = ax0
                   )
ax0.set_ylabel('Number of Immigrants') # or plt.ylabel('Number of Immigrants')
ax0.set_title('Immigration from China and India from 1980 - 2013')  # or plt.title('Immigration from China and India from 1980 - 2013')
ax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')  # or plt.legend(['single element'])


